{"ast":null,"code":"// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { __assign, __awaiter, __generator, __rest } from \"tslib\";\nimport { Amplify, ConsoleLogger as Logger, Hub, StorageHelper, InAppMessagingAction } from '@aws-amplify/core';\nimport flatten from 'lodash/flatten';\nimport { addEventListener, notifyEventListeners } from '../common';\nimport { AWSPinpointProvider } from '../InAppMessaging/Providers';\nimport { InAppMessageInteractionEvent } from '../InAppMessaging/types';\nimport { getUserAgentValue } from './utils';\nvar STORAGE_KEY_SUFFIX = '_inAppMessages';\nvar logger = new Logger('Notifications.InAppMessaging');\nvar InternalInAppMessagingClass = /** @class */function () {\n  function InternalInAppMessagingClass() {\n    var _this = this;\n    this.config = {};\n    this.listeningForAnalyticEvents = false;\n    this.pluggables = [];\n    this.storageSynced = false;\n    /**\n     * Get a plugin from added plugins\n     * @param {string} providerName - the name of the plugin to get\n     */\n    this.getPluggable = function (providerName) {\n      var _a;\n      var pluggable = (_a = _this.pluggables.find(function (pluggable) {\n        return pluggable.getProviderName() === providerName;\n      })) !== null && _a !== void 0 ? _a : null;\n      if (!pluggable) {\n        logger.debug(\"No plugin found with name \" + providerName);\n      }\n      return pluggable;\n    };\n    /**\n     * Add plugin into InAppMessaging\n     * @param {InAppMessagingProvider} pluggable - an instance of the plugin\n     */\n    this.addPluggable = function (pluggable) {\n      if (pluggable && pluggable.getCategory() === 'Notifications' && pluggable.getSubCategory() === 'InAppMessaging') {\n        if (_this.getPluggable(pluggable.getProviderName())) {\n          throw new Error(\"Pluggable \" + pluggable.getProviderName() + \" has already been added.\");\n        }\n        _this.pluggables.push(pluggable);\n        pluggable.configure(_this.config[pluggable.getProviderName()]);\n      }\n    };\n    /**\n     * Remove a plugin from added plugins\n     * @param {string} providerName - the name of the plugin to remove\n     */\n    this.removePluggable = function (providerName) {\n      var index = _this.pluggables.findIndex(function (pluggable) {\n        return pluggable.getProviderName() === providerName;\n      });\n      if (index === -1) {\n        logger.debug(\"No plugin found with name \" + providerName);\n      } else {\n        _this.pluggables.splice(index, 1);\n      }\n    };\n    this.onMessageReceived = function (handler) {\n      return addEventListener(InAppMessageInteractionEvent.MESSAGE_RECEIVED, handler);\n    };\n    this.onMessageDisplayed = function (handler) {\n      return addEventListener(InAppMessageInteractionEvent.MESSAGE_DISPLAYED, handler);\n    };\n    this.onMessageDismissed = function (handler) {\n      return addEventListener(InAppMessageInteractionEvent.MESSAGE_DISMISSED, handler);\n    };\n    this.onMessageActionTaken = function (handler) {\n      return addEventListener(InAppMessageInteractionEvent.MESSAGE_ACTION_TAKEN, handler);\n    };\n    this.notifyMessageInteraction = function (message, type) {\n      notifyEventListeners(type, message);\n    };\n    this.setConflictHandler = function (handler) {\n      _this.conflictHandler = handler;\n    };\n    this.analyticsListener = function (_a) {\n      var payload = _a.payload;\n      var event = payload.event,\n        data = payload.data;\n      switch (event) {\n        case 'record':\n          {\n            _this.dispatchEvent(data);\n            break;\n          }\n        default:\n          break;\n      }\n    };\n    this.syncStorage = function () {\n      return __awaiter(_this, void 0, void 0, function () {\n        var storage, err_1;\n        return __generator(this, function (_a) {\n          switch (_a.label) {\n            case 0:\n              storage = this.config.storage;\n              _a.label = 1;\n            case 1:\n              _a.trys.push([1, 4,, 5]);\n              if (!(typeof storage.sync === 'function')) return [3 /*break*/, 3];\n              return [4 /*yield*/, storage.sync()];\n            case 2:\n              _a.sent();\n              _a.label = 3;\n            case 3:\n              this.storageSynced = true;\n              return [3 /*break*/, 5];\n            case 4:\n              err_1 = _a.sent();\n              logger.error('Failed to sync storage', err_1);\n              return [3 /*break*/, 5];\n            case 5:\n              return [2 /*return*/];\n          }\n        });\n      });\n    };\n\n    this.getMessages = function (key) {\n      return __awaiter(_this, void 0, void 0, function () {\n        var storage, storedMessages, err_2;\n        return __generator(this, function (_a) {\n          switch (_a.label) {\n            case 0:\n              _a.trys.push([0, 3,, 4]);\n              if (!!this.storageSynced) return [3 /*break*/, 2];\n              return [4 /*yield*/, this.syncStorage()];\n            case 1:\n              _a.sent();\n              _a.label = 2;\n            case 2:\n              storage = this.config.storage;\n              storedMessages = storage.getItem(key);\n              return [2 /*return*/, storedMessages ? JSON.parse(storedMessages) : []];\n            case 3:\n              err_2 = _a.sent();\n              logger.error('Failed to retrieve in-app messages from storage', err_2);\n              return [3 /*break*/, 4];\n            case 4:\n              return [2 /*return*/];\n          }\n        });\n      });\n    };\n\n    this.setMessages = function (key, messages) {\n      return __awaiter(_this, void 0, void 0, function () {\n        var storage, err_3;\n        return __generator(this, function (_a) {\n          switch (_a.label) {\n            case 0:\n              if (!messages) {\n                return [2 /*return*/];\n              }\n\n              _a.label = 1;\n            case 1:\n              _a.trys.push([1, 4,, 5]);\n              if (!!this.storageSynced) return [3 /*break*/, 3];\n              return [4 /*yield*/, this.syncStorage()];\n            case 2:\n              _a.sent();\n              _a.label = 3;\n            case 3:\n              storage = this.config.storage;\n              storage.setItem(key, JSON.stringify(messages));\n              return [3 /*break*/, 5];\n            case 4:\n              err_3 = _a.sent();\n              logger.error('Failed to store in-app messages', err_3);\n              return [3 /*break*/, 5];\n            case 5:\n              return [2 /*return*/];\n          }\n        });\n      });\n    };\n\n    this.removeMessages = function (key) {\n      return __awaiter(_this, void 0, void 0, function () {\n        var storage, err_4;\n        return __generator(this, function (_a) {\n          switch (_a.label) {\n            case 0:\n              _a.trys.push([0, 3,, 4]);\n              if (!!this.storageSynced) return [3 /*break*/, 2];\n              return [4 /*yield*/, this.syncStorage()];\n            case 1:\n              _a.sent();\n              _a.label = 2;\n            case 2:\n              storage = this.config.storage;\n              storage.removeItem(key);\n              return [3 /*break*/, 4];\n            case 3:\n              err_4 = _a.sent();\n              logger.error('Failed to remove in-app messages from storage', err_4);\n              return [3 /*break*/, 4];\n            case 4:\n              return [2 /*return*/];\n          }\n        });\n      });\n    };\n\n    this.defaultConflictHandler = function (messages) {\n      // default behavior is to return the message closest to expiry\n      // this function assumes that messages processed by providers already filters out expired messages\n      var sorted = messages.sort(function (a, b) {\n        var _a, _b;\n        var endDateA = (_a = a.metadata) === null || _a === void 0 ? void 0 : _a.endDate;\n        var endDateB = (_b = b.metadata) === null || _b === void 0 ? void 0 : _b.endDate;\n        // if both message end dates are falsy or have the same date string, treat them as equal\n        if (endDateA === endDateB) {\n          return 0;\n        }\n        // if only message A has an end date, treat it as closer to expiry\n        if (endDateA && !endDateB) {\n          return -1;\n        }\n        // if only message B has an end date, treat it as closer to expiry\n        if (!endDateA && endDateB) {\n          return 1;\n        }\n        // otherwise, compare them\n        return new Date(endDateA) < new Date(endDateB) ? -1 : 1;\n      });\n      // always return the top sorted\n      return sorted[0];\n    };\n    this.config = {\n      storage: new StorageHelper().getStorage()\n    };\n    this.setConflictHandler(this.defaultConflictHandler);\n  }\n  /**\n   * Configure InAppMessaging\n   * @param {Object} config - InAppMessaging configuration object\n   */\n  InternalInAppMessagingClass.prototype.configure = function (_a) {\n    var _this = this;\n    var notificationsConfig = (_a === void 0 ? {} : _a).Notifications;\n    var _b = (notificationsConfig === null || notificationsConfig === void 0 ? void 0 : notificationsConfig.InAppMessaging) || {},\n      _c = _b.listenForAnalyticsEvents,\n      listenForAnalyticsEvents = _c === void 0 ? true : _c,\n      config = __rest(_b, [\"listenForAnalyticsEvents\"]);\n    this.config = __assign(__assign({}, this.config), config);\n    logger.debug('configure InAppMessaging', this.config);\n    this.pluggables.forEach(function (pluggable) {\n      pluggable.configure(_this.config[pluggable.getProviderName()]);\n    });\n    if (this.pluggables.length === 0) {\n      this.addPluggable(new AWSPinpointProvider());\n    }\n    if (listenForAnalyticsEvents && !this.listeningForAnalyticEvents) {\n      Hub.listen('analytics', this.analyticsListener);\n      this.listeningForAnalyticEvents = true;\n    }\n    return this.config;\n  };\n  /**\n   * Get the name of this module\n   * @returns {string} name of this module\n   */\n  InternalInAppMessagingClass.prototype.getModuleName = function () {\n    return 'InternalInAppMessaging';\n  };\n  /**\n   * Get the map resources that are currently available through the provider\n   * @param {CustomUserAgentDetails} customUserAgentDetails optional parameter to send user agent details\n   * @returns - Array of available map resources\n   */\n  InternalInAppMessagingClass.prototype.syncMessages = function (customUserAgentDetails) {\n    var _this = this;\n    return Promise.all(this.pluggables.map(function (pluggable) {\n      return __awaiter(_this, void 0, void 0, function () {\n        var messages, key, err_5;\n        return __generator(this, function (_a) {\n          switch (_a.label) {\n            case 0:\n              _a.trys.push([0, 3,, 4]);\n              return [4 /*yield*/, pluggable.getInAppMessages(getUserAgentValue(InAppMessagingAction.SyncMessages, customUserAgentDetails))];\n            case 1:\n              messages = _a.sent();\n              key = \"\" + pluggable.getProviderName() + STORAGE_KEY_SUFFIX;\n              return [4 /*yield*/, this.setMessages(key, messages)];\n            case 2:\n              _a.sent();\n              return [3 /*break*/, 4];\n            case 3:\n              err_5 = _a.sent();\n              logger.error('Failed to sync messages', err_5);\n              throw err_5;\n            case 4:\n              return [2 /*return*/];\n          }\n        });\n      });\n    }));\n  };\n\n  InternalInAppMessagingClass.prototype.clearMessages = function () {\n    var _this = this;\n    return Promise.all(this.pluggables.map(function (pluggable) {\n      return __awaiter(_this, void 0, void 0, function () {\n        var key;\n        return __generator(this, function (_a) {\n          switch (_a.label) {\n            case 0:\n              key = \"\" + pluggable.getProviderName() + STORAGE_KEY_SUFFIX;\n              return [4 /*yield*/, this.removeMessages(key)];\n            case 1:\n              _a.sent();\n              return [2 /*return*/];\n          }\n        });\n      });\n    }));\n  };\n\n  InternalInAppMessagingClass.prototype.dispatchEvent = function (event) {\n    return __awaiter(this, void 0, void 0, function () {\n      var messages, flattenedMessages;\n      var _this = this;\n      return __generator(this, function (_a) {\n        switch (_a.label) {\n          case 0:\n            return [4 /*yield*/, Promise.all(this.pluggables.map(function (pluggable) {\n              return __awaiter(_this, void 0, void 0, function () {\n                var key, messages;\n                return __generator(this, function (_a) {\n                  switch (_a.label) {\n                    case 0:\n                      key = \"\" + pluggable.getProviderName() + STORAGE_KEY_SUFFIX;\n                      return [4 /*yield*/, this.getMessages(key)];\n                    case 1:\n                      messages = _a.sent();\n                      return [2 /*return*/, pluggable.processInAppMessages(messages, event)];\n                  }\n                });\n              });\n            }))];\n          case 1:\n            messages = _a.sent();\n            flattenedMessages = flatten(messages);\n            if (flattenedMessages.length) {\n              notifyEventListeners(InAppMessageInteractionEvent.MESSAGE_RECEIVED, this.conflictHandler(flattenedMessages));\n            }\n            return [2 /*return*/];\n        }\n      });\n    });\n  };\n\n  InternalInAppMessagingClass.prototype.identifyUser = function (userId, userInfo, customUserAgentDetails) {\n    var _this = this;\n    return Promise.all(this.pluggables.map(function (pluggable) {\n      return __awaiter(_this, void 0, void 0, function () {\n        var err_6;\n        return __generator(this, function (_a) {\n          switch (_a.label) {\n            case 0:\n              _a.trys.push([0, 2,, 3]);\n              return [4 /*yield*/, pluggable.identifyUser(userId, userInfo, getUserAgentValue(InAppMessagingAction.IdentifyUser, customUserAgentDetails))];\n            case 1:\n              _a.sent();\n              return [3 /*break*/, 3];\n            case 2:\n              err_6 = _a.sent();\n              logger.error('Failed to identify user', err_6);\n              throw err_6;\n            case 3:\n              return [2 /*return*/];\n          }\n        });\n      });\n    }));\n  };\n\n  return InternalInAppMessagingClass;\n}();\nexport { InternalInAppMessagingClass };\nexport var InternalInAppMessaging = new InternalInAppMessagingClass();\nAmplify.register(InternalInAppMessaging);","map":{"version":3,"names":["Amplify","ConsoleLogger","Logger","Hub","StorageHelper","InAppMessagingAction","flatten","addEventListener","notifyEventListeners","AWSPinpointProvider","InAppMessageInteractionEvent","getUserAgentValue","STORAGE_KEY_SUFFIX","logger","InternalInAppMessagingClass","_this","config","listeningForAnalyticEvents","pluggables","storageSynced","getPluggable","providerName","pluggable","_a","find","getProviderName","debug","addPluggable","getCategory","getSubCategory","Error","push","configure","removePluggable","index","findIndex","splice","onMessageReceived","handler","MESSAGE_RECEIVED","onMessageDisplayed","MESSAGE_DISPLAYED","onMessageDismissed","MESSAGE_DISMISSED","onMessageActionTaken","MESSAGE_ACTION_TAKEN","notifyMessageInteraction","message","type","setConflictHandler","conflictHandler","analyticsListener","payload","event","data","dispatchEvent","syncStorage","__awaiter","storage","sync","sent","error","err_1","getMessages","key","storedMessages","getItem","JSON","parse","err_2","setMessages","messages","setItem","stringify","err_3","removeMessages","removeItem","err_4","defaultConflictHandler","sorted","sort","a","b","endDateA","metadata","endDate","endDateB","_b","Date","getStorage","prototype","notificationsConfig","Notifications","InAppMessaging","_c","listenForAnalyticsEvents","__rest","__assign","forEach","length","listen","getModuleName","syncMessages","customUserAgentDetails","Promise","all","map","getInAppMessages","SyncMessages","err_5","clearMessages","processInAppMessages","flattenedMessages","identifyUser","userId","userInfo","IdentifyUser","err_6","InternalInAppMessaging","register"],"sources":["C:\\Users\\geun\\amplify-app\\node_modules\\@aws-amplify\\notifications\\src\\internals\\InternalInAppMessaging.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\n\nimport {\n\tAmplify,\n\tConsoleLogger as Logger,\n\tHubCallback,\n\tHubCapsule,\n\tHub,\n\tStorageHelper,\n\tCustomUserAgentDetails,\n\tInAppMessagingAction,\n} from '@aws-amplify/core';\nimport flatten from 'lodash/flatten';\n\nimport {\n\taddEventListener,\n\tEventListener,\n\tnotifyEventListeners,\n} from '../common';\nimport { NotificationsConfig, UserInfo } from '../types';\nimport { AWSPinpointProvider } from '../InAppMessaging/Providers';\nimport {\n\tInAppMessage,\n\tInAppMessageInteractionEvent,\n\tInAppMessagingInterface,\n\tInAppMessagingConfig,\n\tInAppMessageConflictHandler,\n\tInAppMessagingEvent,\n\tInAppMessagingProvider,\n\tOnMessageInteractionEventHandler,\n\tInternalNotificationsSubCategory,\n\tNotificationsSubCategory,\n} from '../InAppMessaging/types';\nimport { getUserAgentValue } from './utils';\n\nconst STORAGE_KEY_SUFFIX = '_inAppMessages';\n\nconst logger = new Logger('Notifications.InAppMessaging');\n\nexport class InternalInAppMessagingClass implements InAppMessagingInterface {\n\tprivate config: Record<string, any> = {};\n\tprivate conflictHandler: InAppMessageConflictHandler;\n\tprivate listeningForAnalyticEvents = false;\n\tprivate pluggables: InAppMessagingProvider[] = [];\n\tprivate storageSynced = false;\n\n\tconstructor() {\n\t\tthis.config = { storage: new StorageHelper().getStorage() };\n\t\tthis.setConflictHandler(this.defaultConflictHandler);\n\t}\n\n\t/**\n\t * Configure InAppMessaging\n\t * @param {Object} config - InAppMessaging configuration object\n\t */\n\tconfigure({\n\t\tNotifications: notificationsConfig,\n\t}: NotificationsConfig = {}): InAppMessagingConfig {\n\t\tconst { listenForAnalyticsEvents = true, ...config }: InAppMessagingConfig =\n\t\t\tnotificationsConfig?.InAppMessaging || {};\n\n\t\tthis.config = { ...this.config, ...config };\n\n\t\tlogger.debug('configure InAppMessaging', this.config);\n\n\t\tthis.pluggables.forEach(pluggable => {\n\t\t\tpluggable.configure(this.config[pluggable.getProviderName()]);\n\t\t});\n\n\t\tif (this.pluggables.length === 0) {\n\t\t\tthis.addPluggable(new AWSPinpointProvider());\n\t\t}\n\n\t\tif (listenForAnalyticsEvents && !this.listeningForAnalyticEvents) {\n\t\t\tHub.listen('analytics', this.analyticsListener);\n\t\t\tthis.listeningForAnalyticEvents = true;\n\t\t}\n\n\t\treturn this.config;\n\t}\n\n\t/**\n\t * Get the name of this module\n\t * @returns {string} name of this module\n\t */\n\tgetModuleName(): NotificationsSubCategory | InternalNotificationsSubCategory {\n\t\treturn 'InternalInAppMessaging';\n\t}\n\n\t/**\n\t * Get a plugin from added plugins\n\t * @param {string} providerName - the name of the plugin to get\n\t */\n\tgetPluggable = (providerName: string): InAppMessagingProvider => {\n\t\tconst pluggable =\n\t\t\tthis.pluggables.find(\n\t\t\t\tpluggable => pluggable.getProviderName() === providerName\n\t\t\t) ?? null;\n\n\t\tif (!pluggable) {\n\t\t\tlogger.debug(`No plugin found with name ${providerName}`);\n\t\t}\n\n\t\treturn pluggable;\n\t};\n\n\t/**\n\t * Add plugin into InAppMessaging\n\t * @param {InAppMessagingProvider} pluggable - an instance of the plugin\n\t */\n\taddPluggable = (pluggable: InAppMessagingProvider): void => {\n\t\tif (\n\t\t\tpluggable &&\n\t\t\tpluggable.getCategory() === 'Notifications' &&\n\t\t\tpluggable.getSubCategory() === 'InAppMessaging'\n\t\t) {\n\t\t\tif (this.getPluggable(pluggable.getProviderName())) {\n\t\t\t\tthrow new Error(\n\t\t\t\t\t`Pluggable ${pluggable.getProviderName()} has already been added.`\n\t\t\t\t);\n\t\t\t}\n\t\t\tthis.pluggables.push(pluggable);\n\t\t\tpluggable.configure(this.config[pluggable.getProviderName()]);\n\t\t}\n\t};\n\n\t/**\n\t * Remove a plugin from added plugins\n\t * @param {string} providerName - the name of the plugin to remove\n\t */\n\tremovePluggable = (providerName: string): void => {\n\t\tconst index = this.pluggables.findIndex(\n\t\t\tpluggable => pluggable.getProviderName() === providerName\n\t\t);\n\t\tif (index === -1) {\n\t\t\tlogger.debug(`No plugin found with name ${providerName}`);\n\t\t} else {\n\t\t\tthis.pluggables.splice(index, 1);\n\t\t}\n\t};\n\n\t/**\n\t * Get the map resources that are currently available through the provider\n\t * @param {CustomUserAgentDetails} customUserAgentDetails optional parameter to send user agent details\n\t * @returns - Array of available map resources\n\t */\n\tpublic syncMessages(\n\t\tcustomUserAgentDetails?: CustomUserAgentDetails\n\t): Promise<void[]> {\n\t\treturn Promise.all<void>(\n\t\t\tthis.pluggables.map(async pluggable => {\n\t\t\t\ttry {\n\t\t\t\t\tconst messages = await pluggable.getInAppMessages(\n\t\t\t\t\t\tgetUserAgentValue(\n\t\t\t\t\t\t\tInAppMessagingAction.SyncMessages,\n\t\t\t\t\t\t\tcustomUserAgentDetails\n\t\t\t\t\t\t)\n\t\t\t\t\t);\n\t\t\t\t\tconst key = `${pluggable.getProviderName()}${STORAGE_KEY_SUFFIX}`;\n\t\t\t\t\tawait this.setMessages(key, messages);\n\t\t\t\t} catch (err) {\n\t\t\t\t\tlogger.error('Failed to sync messages', err);\n\t\t\t\t\tthrow err;\n\t\t\t\t}\n\t\t\t})\n\t\t);\n\t}\n\n\tpublic clearMessages(): Promise<void[]> {\n\t\treturn Promise.all<void>(\n\t\t\tthis.pluggables.map(async pluggable => {\n\t\t\t\tconst key = `${pluggable.getProviderName()}${STORAGE_KEY_SUFFIX}`;\n\t\t\t\tawait this.removeMessages(key);\n\t\t\t})\n\t\t);\n\t}\n\n\tpublic async dispatchEvent(event: InAppMessagingEvent): Promise<void> {\n\t\tconst messages: InAppMessage[][] = await Promise.all<InAppMessage[]>(\n\t\t\tthis.pluggables.map(async pluggable => {\n\t\t\t\tconst key = `${pluggable.getProviderName()}${STORAGE_KEY_SUFFIX}`;\n\t\t\t\tconst messages = await this.getMessages(key);\n\t\t\t\treturn pluggable.processInAppMessages(messages, event);\n\t\t\t})\n\t\t);\n\n\t\tconst flattenedMessages = flatten(messages);\n\n\t\tif (flattenedMessages.length) {\n\t\t\tnotifyEventListeners(\n\t\t\t\tInAppMessageInteractionEvent.MESSAGE_RECEIVED,\n\t\t\t\tthis.conflictHandler(flattenedMessages)\n\t\t\t);\n\t\t}\n\t}\n\n\tpublic identifyUser(\n\t\tuserId: string,\n\t\tuserInfo: UserInfo,\n\t\tcustomUserAgentDetails?: CustomUserAgentDetails\n\t): Promise<void[]> {\n\t\treturn Promise.all<void>(\n\t\t\tthis.pluggables.map(async pluggable => {\n\t\t\t\ttry {\n\t\t\t\t\tawait pluggable.identifyUser(\n\t\t\t\t\t\tuserId,\n\t\t\t\t\t\tuserInfo,\n\t\t\t\t\t\tgetUserAgentValue(\n\t\t\t\t\t\t\tInAppMessagingAction.IdentifyUser,\n\t\t\t\t\t\t\tcustomUserAgentDetails\n\t\t\t\t\t\t)\n\t\t\t\t\t);\n\t\t\t\t} catch (err) {\n\t\t\t\t\tlogger.error('Failed to identify user', err);\n\t\t\t\t\tthrow err;\n\t\t\t\t}\n\t\t\t})\n\t\t);\n\t}\n\n\tonMessageReceived = (\n\t\thandler: OnMessageInteractionEventHandler\n\t): EventListener<OnMessageInteractionEventHandler> =>\n\t\taddEventListener(InAppMessageInteractionEvent.MESSAGE_RECEIVED, handler);\n\n\tonMessageDisplayed = (\n\t\thandler: OnMessageInteractionEventHandler\n\t): EventListener<OnMessageInteractionEventHandler> =>\n\t\taddEventListener(InAppMessageInteractionEvent.MESSAGE_DISPLAYED, handler);\n\n\tonMessageDismissed = (\n\t\thandler: OnMessageInteractionEventHandler\n\t): EventListener<OnMessageInteractionEventHandler> =>\n\t\taddEventListener(InAppMessageInteractionEvent.MESSAGE_DISMISSED, handler);\n\n\tonMessageActionTaken = (\n\t\thandler: OnMessageInteractionEventHandler\n\t): EventListener<OnMessageInteractionEventHandler> =>\n\t\taddEventListener(\n\t\t\tInAppMessageInteractionEvent.MESSAGE_ACTION_TAKEN,\n\t\t\thandler\n\t\t);\n\n\tnotifyMessageInteraction = (\n\t\tmessage: InAppMessage,\n\t\ttype: InAppMessageInteractionEvent\n\t): void => {\n\t\tnotifyEventListeners(type, message);\n\t};\n\n\tsetConflictHandler = (handler: InAppMessageConflictHandler): void => {\n\t\tthis.conflictHandler = handler;\n\t};\n\n\tprivate analyticsListener: HubCallback = ({ payload }: HubCapsule) => {\n\t\tconst { event, data } = payload;\n\t\tswitch (event) {\n\t\t\tcase 'record': {\n\t\t\t\tthis.dispatchEvent(data);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tdefault:\n\t\t\t\tbreak;\n\t\t}\n\t};\n\n\tprivate syncStorage = async (): Promise<void> => {\n\t\tconst { storage } = this.config;\n\t\ttry {\n\t\t\t// Only run sync() if it's available (i.e. React Native)\n\t\t\tif (typeof storage.sync === 'function') {\n\t\t\t\tawait storage.sync();\n\t\t\t}\n\t\t\tthis.storageSynced = true;\n\t\t} catch (err) {\n\t\t\tlogger.error('Failed to sync storage', err);\n\t\t}\n\t};\n\n\tprivate getMessages = async (key: string): Promise<any> => {\n\t\ttry {\n\t\t\tif (!this.storageSynced) {\n\t\t\t\tawait this.syncStorage();\n\t\t\t}\n\t\t\tconst { storage } = this.config;\n\t\t\tconst storedMessages = storage.getItem(key);\n\t\t\treturn storedMessages ? JSON.parse(storedMessages) : [];\n\t\t} catch (err) {\n\t\t\tlogger.error('Failed to retrieve in-app messages from storage', err);\n\t\t}\n\t};\n\n\tprivate setMessages = async (\n\t\tkey: string,\n\t\tmessages: InAppMessage[]\n\t): Promise<void> => {\n\t\tif (!messages) {\n\t\t\treturn;\n\t\t}\n\n\t\ttry {\n\t\t\tif (!this.storageSynced) {\n\t\t\t\tawait this.syncStorage();\n\t\t\t}\n\t\t\tconst { storage } = this.config;\n\t\t\tstorage.setItem(key, JSON.stringify(messages));\n\t\t} catch (err) {\n\t\t\tlogger.error('Failed to store in-app messages', err);\n\t\t}\n\t};\n\n\tprivate removeMessages = async (key: string): Promise<void> => {\n\t\ttry {\n\t\t\tif (!this.storageSynced) {\n\t\t\t\tawait this.syncStorage();\n\t\t\t}\n\t\t\tconst { storage } = this.config;\n\t\t\tstorage.removeItem(key);\n\t\t} catch (err) {\n\t\t\tlogger.error('Failed to remove in-app messages from storage', err);\n\t\t}\n\t};\n\n\tprivate defaultConflictHandler = (messages: InAppMessage[]): InAppMessage => {\n\t\t// default behavior is to return the message closest to expiry\n\t\t// this function assumes that messages processed by providers already filters out expired messages\n\t\tconst sorted = messages.sort((a, b) => {\n\t\t\tconst endDateA = a.metadata?.endDate;\n\t\t\tconst endDateB = b.metadata?.endDate;\n\t\t\t// if both message end dates are falsy or have the same date string, treat them as equal\n\t\t\tif (endDateA === endDateB) {\n\t\t\t\treturn 0;\n\t\t\t}\n\t\t\t// if only message A has an end date, treat it as closer to expiry\n\t\t\tif (endDateA && !endDateB) {\n\t\t\t\treturn -1;\n\t\t\t}\n\t\t\t// if only message B has an end date, treat it as closer to expiry\n\t\t\tif (!endDateA && endDateB) {\n\t\t\t\treturn 1;\n\t\t\t}\n\t\t\t// otherwise, compare them\n\t\t\treturn new Date(endDateA) < new Date(endDateB) ? -1 : 1;\n\t\t});\n\t\t// always return the top sorted\n\t\treturn sorted[0];\n\t};\n}\n\nexport const InternalInAppMessaging = new InternalInAppMessagingClass();\nAmplify.register(InternalInAppMessaging);\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}