{"ast":null,"code":"import { __awaiter, __extends, __generator } from \"tslib\";\n// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { Amplify } from '@aws-amplify/core';\nimport { InternalGeoClass } from './internals/InternalGeo';\nvar GeoClass = /** @class */function (_super) {\n  __extends(GeoClass, _super);\n  function GeoClass() {\n    return _super !== null && _super.apply(this, arguments) || this;\n  }\n  /**\n   * get the name of the module category\n   * @returns {string} name of the module category\n   */\n  GeoClass.prototype.getModuleName = function () {\n    return GeoClass.MODULE;\n  };\n  /**\n   * Search by text input with optional parameters\n   * @param  {string} text - The text string that is to be searched for\n   * @param  {SearchByTextOptions} options? - Optional parameters to the search\n   * @returns {Promise<Place[]>} - Promise resolves to a list of Places that match search parameters\n   */\n  GeoClass.prototype.searchByText = function (text, options) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        return [2 /*return*/, _super.prototype.searchByText.call(this, text, options)];\n      });\n    });\n  };\n  /**\n   * Search for search term suggestions based on input text\n   * @param  {string} text - The text string that is to be search for\n   * @param  {SearchByTextOptions} options? - Optional parameters to the search\n   * @returns {Promise<SearchForSuggestionsResults>} - Resolves to an array of search suggestion strings\n   */\n  GeoClass.prototype.searchForSuggestions = function (text, options) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        return [2 /*return*/, _super.prototype.searchForSuggestions.call(this, text, options)];\n      });\n    });\n  };\n  /**\n   * Search for location by unique ID\n   * @param  {string} placeId - Unique ID of the location that is to be searched for\n   * @param  {searchByPlaceIdOptions} options? - Optional parameters to the search\n   * @returns {Promise<Place>} - Resolves to a place with the given placeId\n   */\n  GeoClass.prototype.searchByPlaceId = function (placeId, options) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        return [2 /*return*/, _super.prototype.searchByPlaceId.call(this, placeId, options)];\n      });\n    });\n  };\n  /**\n   * Reverse geocoding search via a coordinate point on the map\n   * @param coordinates - Coordinates array for the search input\n   * @param options - Options parameters for the search\n   * @returns {Promise<Place>} - Promise that resolves to a place matching search coordinates\n   */\n  GeoClass.prototype.searchByCoordinates = function (coordinates, options) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        return [2 /*return*/, _super.prototype.searchByCoordinates.call(this, coordinates, options)];\n      });\n    });\n  };\n  /**\n   * Create geofences\n   * @param geofences - Single or array of geofence objects to create\n   * @param options? - Optional parameters for creating geofences\n   * @returns {Promise<SaveGeofencesResults>} - Promise that resolves to an object with:\n   *   successes: list of geofences successfully created\n   *   errors: list of geofences that failed to create\n   */\n  GeoClass.prototype.saveGeofences = function (geofences, options) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        return [2 /*return*/, _super.prototype.saveGeofences.call(this, geofences, options)];\n      });\n    });\n  };\n  /**\n   * Get a single geofence by geofenceId\n   * @param geofenceId: GeofenceId - The string id of the geofence to get\n   * @param options?: GeofenceOptions - Optional parameters for getting a geofence\n   * @returns Promise<Geofence> - Promise that resolves to a geofence object\n   */\n  GeoClass.prototype.getGeofence = function (geofenceId, options) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        return [2 /*return*/, _super.prototype.getGeofence.call(this, geofenceId, options)];\n      });\n    });\n  };\n  /**\n   * List geofences\n   * @param  options?: ListGeofenceOptions\n   * @returns {Promise<ListGeofencesResults>} - Promise that resolves to an object with:\n   *   entries: list of geofences - 100 geofences are listed per page\n   *   nextToken: token for next page of geofences\n   */\n  GeoClass.prototype.listGeofences = function (options) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        return [2 /*return*/, _super.prototype.listGeofences.call(this, options)];\n      });\n    });\n  };\n  /**\n   * Delete geofences\n   * @param geofenceIds: string|string[]\n   * @param options?: GeofenceOptions\n   * @returns {Promise<DeleteGeofencesResults>} - Promise that resolves to an object with:\n   *  successes: list of geofences successfully deleted\n   *  errors: list of geofences that failed to delete\n   */\n  GeoClass.prototype.deleteGeofences = function (geofenceIds, options) {\n    return __awaiter(this, void 0, void 0, function () {\n      return __generator(this, function (_a) {\n        return [2 /*return*/, _super.prototype.deleteGeofences.call(this, geofenceIds, options)];\n      });\n    });\n  };\n  GeoClass.MODULE = 'Geo';\n  return GeoClass;\n}(InternalGeoClass);\nexport { GeoClass };\nexport var Geo = new GeoClass();\nAmplify.register(Geo);","map":{"version":3,"names":["Amplify","InternalGeoClass","GeoClass","_super","__extends","prototype","getModuleName","MODULE","searchByText","text","options","call","searchForSuggestions","searchByPlaceId","placeId","searchByCoordinates","coordinates","saveGeofences","geofences","getGeofence","geofenceId","listGeofences","deleteGeofences","geofenceIds","Geo","register"],"sources":["C:\\Users\\geun\\amplify-app\\node_modules\\@aws-amplify\\geo\\src\\Geo.ts"],"sourcesContent":["// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.\n// SPDX-License-Identifier: Apache-2.0\nimport { Amplify, ConsoleLogger as Logger } from '@aws-amplify/core';\nimport {\n\tPlace,\n\tCoordinates,\n\tSearchByTextOptions,\n\tSearchByCoordinatesOptions,\n\tGeofenceId,\n\tGeofenceInput,\n\tGeofenceOptions,\n\tSaveGeofencesResults,\n\tGeofence,\n\tListGeofenceOptions,\n\tListGeofenceResults,\n\tDeleteGeofencesResults,\n\tsearchByPlaceIdOptions,\n} from './types';\nimport { InternalGeoClass } from './internals/InternalGeo';\n\nexport class GeoClass extends InternalGeoClass {\n\tstatic MODULE = 'Geo';\n\n\t/**\n\t * get the name of the module category\n\t * @returns {string} name of the module category\n\t */\n\tpublic getModuleName() {\n\t\treturn GeoClass.MODULE;\n\t}\n\n\t/**\n\t * Search by text input with optional parameters\n\t * @param  {string} text - The text string that is to be searched for\n\t * @param  {SearchByTextOptions} options? - Optional parameters to the search\n\t * @returns {Promise<Place[]>} - Promise resolves to a list of Places that match search parameters\n\t */\n\tpublic async searchByText(\n\t\ttext: string,\n\t\toptions?: SearchByTextOptions\n\t): Promise<Place[]> {\n\t\treturn super.searchByText(text, options);\n\t}\n\n\t/**\n\t * Search for search term suggestions based on input text\n\t * @param  {string} text - The text string that is to be search for\n\t * @param  {SearchByTextOptions} options? - Optional parameters to the search\n\t * @returns {Promise<SearchForSuggestionsResults>} - Resolves to an array of search suggestion strings\n\t */\n\tpublic async searchForSuggestions(\n\t\ttext: string,\n\t\toptions?: SearchByTextOptions\n\t) {\n\t\treturn super.searchForSuggestions(text, options);\n\t}\n\n\t/**\n\t * Search for location by unique ID\n\t * @param  {string} placeId - Unique ID of the location that is to be searched for\n\t * @param  {searchByPlaceIdOptions} options? - Optional parameters to the search\n\t * @returns {Promise<Place>} - Resolves to a place with the given placeId\n\t */\n\tpublic async searchByPlaceId(\n\t\tplaceId: string,\n\t\toptions?: searchByPlaceIdOptions\n\t) {\n\t\treturn super.searchByPlaceId(placeId, options);\n\t}\n\n\t/**\n\t * Reverse geocoding search via a coordinate point on the map\n\t * @param coordinates - Coordinates array for the search input\n\t * @param options - Options parameters for the search\n\t * @returns {Promise<Place>} - Promise that resolves to a place matching search coordinates\n\t */\n\tpublic async searchByCoordinates(\n\t\tcoordinates: Coordinates,\n\t\toptions?: SearchByCoordinatesOptions\n\t): Promise<Place> {\n\t\treturn super.searchByCoordinates(coordinates, options);\n\t}\n\n\t/**\n\t * Create geofences\n\t * @param geofences - Single or array of geofence objects to create\n\t * @param options? - Optional parameters for creating geofences\n\t * @returns {Promise<SaveGeofencesResults>} - Promise that resolves to an object with:\n\t *   successes: list of geofences successfully created\n\t *   errors: list of geofences that failed to create\n\t */\n\tpublic async saveGeofences(\n\t\tgeofences: GeofenceInput | GeofenceInput[],\n\t\toptions?: GeofenceOptions\n\t): Promise<SaveGeofencesResults> {\n\t\treturn super.saveGeofences(geofences, options);\n\t}\n\n\t/**\n\t * Get a single geofence by geofenceId\n\t * @param geofenceId: GeofenceId - The string id of the geofence to get\n\t * @param options?: GeofenceOptions - Optional parameters for getting a geofence\n\t * @returns Promise<Geofence> - Promise that resolves to a geofence object\n\t */\n\tpublic async getGeofence(\n\t\tgeofenceId: GeofenceId,\n\t\toptions?: GeofenceOptions\n\t): Promise<Geofence> {\n\t\treturn super.getGeofence(geofenceId, options);\n\t}\n\n\t/**\n\t * List geofences\n\t * @param  options?: ListGeofenceOptions\n\t * @returns {Promise<ListGeofencesResults>} - Promise that resolves to an object with:\n\t *   entries: list of geofences - 100 geofences are listed per page\n\t *   nextToken: token for next page of geofences\n\t */\n\tpublic async listGeofences(\n\t\toptions?: ListGeofenceOptions\n\t): Promise<ListGeofenceResults> {\n\t\treturn super.listGeofences(options);\n\t}\n\n\t/**\n\t * Delete geofences\n\t * @param geofenceIds: string|string[]\n\t * @param options?: GeofenceOptions\n\t * @returns {Promise<DeleteGeofencesResults>} - Promise that resolves to an object with:\n\t *  successes: list of geofences successfully deleted\n\t *  errors: list of geofences that failed to delete\n\t */\n\tpublic async deleteGeofences(\n\t\tgeofenceIds: string | string[],\n\t\toptions?: GeofenceOptions\n\t): Promise<DeleteGeofencesResults> {\n\t\treturn super.deleteGeofences(geofenceIds, options);\n\t}\n}\n\nexport const Geo = new GeoClass();\nAmplify.register(Geo);\n"],"mappings":";AAAA;AACA;AACA,SAASA,OAAO,QAAiC,mBAAmB;AAgBpE,SAASC,gBAAgB,QAAQ,yBAAyB;AAE1D,IAAAC,QAAA,0BAAAC,MAAA;EAA8BC,SAAA,CAAAF,QAAA,EAAAC,MAAA;EAA9B,SAAAD,SAAA;;EAsHA;EAnHC;;;;EAIOA,QAAA,CAAAG,SAAA,CAAAC,aAAa,GAApB;IACC,OAAOJ,QAAQ,CAACK,MAAM;EACvB,CAAC;EAED;;;;;;EAMaL,QAAA,CAAAG,SAAA,CAAAG,YAAY,GAAzB,UACCC,IAAY,EACZC,OAA6B;;;QAE7B,sBAAOP,MAAA,CAAAE,SAAA,CAAMG,YAAY,CAAAG,IAAA,OAACF,IAAI,EAAEC,OAAO,CAAC;;;GACxC;EAED;;;;;;EAMaR,QAAA,CAAAG,SAAA,CAAAO,oBAAoB,GAAjC,UACCH,IAAY,EACZC,OAA6B;;;QAE7B,sBAAOP,MAAA,CAAAE,SAAA,CAAMO,oBAAoB,CAAAD,IAAA,OAACF,IAAI,EAAEC,OAAO,CAAC;;;GAChD;EAED;;;;;;EAMaR,QAAA,CAAAG,SAAA,CAAAQ,eAAe,GAA5B,UACCC,OAAe,EACfJ,OAAgC;;;QAEhC,sBAAOP,MAAA,CAAAE,SAAA,CAAMQ,eAAe,CAAAF,IAAA,OAACG,OAAO,EAAEJ,OAAO,CAAC;;;GAC9C;EAED;;;;;;EAMaR,QAAA,CAAAG,SAAA,CAAAU,mBAAmB,GAAhC,UACCC,WAAwB,EACxBN,OAAoC;;;QAEpC,sBAAOP,MAAA,CAAAE,SAAA,CAAMU,mBAAmB,CAAAJ,IAAA,OAACK,WAAW,EAAEN,OAAO,CAAC;;;GACtD;EAED;;;;;;;;EAQaR,QAAA,CAAAG,SAAA,CAAAY,aAAa,GAA1B,UACCC,SAA0C,EAC1CR,OAAyB;;;QAEzB,sBAAOP,MAAA,CAAAE,SAAA,CAAMY,aAAa,CAAAN,IAAA,OAACO,SAAS,EAAER,OAAO,CAAC;;;GAC9C;EAED;;;;;;EAMaR,QAAA,CAAAG,SAAA,CAAAc,WAAW,GAAxB,UACCC,UAAsB,EACtBV,OAAyB;;;QAEzB,sBAAOP,MAAA,CAAAE,SAAA,CAAMc,WAAW,CAAAR,IAAA,OAACS,UAAU,EAAEV,OAAO,CAAC;;;GAC7C;EAED;;;;;;;EAOaR,QAAA,CAAAG,SAAA,CAAAgB,aAAa,GAA1B,UACCX,OAA6B;;;QAE7B,sBAAOP,MAAA,CAAAE,SAAA,CAAMgB,aAAa,CAAAV,IAAA,OAACD,OAAO,CAAC;;;GACnC;EAED;;;;;;;;EAQaR,QAAA,CAAAG,SAAA,CAAAiB,eAAe,GAA5B,UACCC,WAA8B,EAC9Bb,OAAyB;;;QAEzB,sBAAOP,MAAA,CAAAE,SAAA,CAAMiB,eAAe,CAAAX,IAAA,OAACY,WAAW,EAAEb,OAAO,CAAC;;;GAClD;EApHMR,QAAA,CAAAK,MAAM,GAAG,KAAK;EAqHtB,OAAAL,QAAC;CAAA,CAtH6BD,gBAAgB;SAAjCC,QAAQ;AAwHrB,OAAO,IAAMsB,GAAG,GAAG,IAAItB,QAAQ,EAAE;AACjCF,OAAO,CAACyB,QAAQ,CAACD,GAAG,CAAC"},"metadata":{},"sourceType":"module","externalDependencies":[]}