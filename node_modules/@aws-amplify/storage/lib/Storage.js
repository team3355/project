"use strict";
// Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
// SPDX-License-Identifier: Apache-2.0
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.StorageInstance = exports.Storage = void 0;
var core_1 = require("@aws-amplify/core");
var InternalStorage_1 = require("./internals/InternalStorage");
var logger = new core_1.ConsoleLogger('StorageClass');
var loggerStorageInstance = new core_1.ConsoleLogger('Storage'); // Logging relating to Storage instance management
var DEFAULT_PROVIDER = 'AWSS3';
/**
 * Provide storage methods to use AWS S3
 */
var Storage = /** @class */ (function (_super) {
    __extends(Storage, _super);
    function Storage() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    Storage.prototype.getModuleName = function () {
        return 'Storage';
    };
    Storage.prototype.cancel = function (request, message) {
        return _super.prototype.cancel.call(this, request, message);
    };
    Storage.prototype.copy = function (src, dest, config) {
        return _super.prototype.copy.call(this, src, dest, config);
    };
    Storage.prototype.get = function (key, config) {
        return _super.prototype.get.call(this, key, config);
    };
    Storage.prototype.getProperties = function (key, config) {
        return _super.prototype.getProperties.call(this, key, config);
    };
    Storage.prototype.put = function (key, object, config) {
        return _super.prototype.put.call(this, key, object, config);
    };
    Storage.prototype.remove = function (key, config) {
        return _super.prototype.remove.call(this, key, config);
    };
    Storage.prototype.list = function (path, config) {
        return _super.prototype.list.call(this, path, config);
    };
    return Storage;
}(InternalStorage_1.InternalStorageClass));
exports.Storage = Storage;
/**
 * Configure & register Storage singleton instance.
 */
var _instance = null;
var getInstance = function () {
    if (_instance) {
        return _instance;
    }
    loggerStorageInstance.debug('Create Storage Instance, debug');
    _instance = new Storage();
    _instance.vault = new Storage();
    var old_configure = _instance.configure;
    _instance.configure = function (options) {
        loggerStorageInstance.debug('storage configure called');
        var vaultConfig = __assign({}, old_configure.call(_instance, options));
        // set level private for each provider for the vault
        Object.keys(vaultConfig).forEach(function (providerName) {
            if (typeof vaultConfig[providerName] !== 'string') {
                vaultConfig[providerName] = __assign(__assign({}, vaultConfig[providerName]), { level: 'private' });
            }
        });
        loggerStorageInstance.debug('storage vault configure called');
        _instance.vault.configure(vaultConfig);
    };
    return _instance;
};
exports.StorageInstance = getInstance();
core_1.Amplify.register(exports.StorageInstance);
